{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { RulesProvider, useRules } from '../utils/eslintRules';\nimport { DataSet, Modal, ActiveItem } from '../components';\nimport { Text, Badge, Anchor } from '../ui';\nimport { Grid, Row, Col } from '../utils/grid';\n\nvar StyleGuides = function StyleGuides() {\n  var _useRules = useRules(),\n      rules = _useRules.rules;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      activeKey = _useState2[0],\n      setActiveKey = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showModal = _useState4[0],\n      setShowModal = _useState4[1];\n\n  var renderModal = function renderModal() {\n    if (!showModal) {\n      return;\n    }\n\n    var activeItem = rules.find(function (rule) {\n      return rule.key === activeKey;\n    });\n    return React.createElement(Modal, {\n      title: activeKey,\n      content: React.createElement(ActiveItem, {\n        rule: activeItem\n      }),\n      close: function close() {\n        return setShowModal(false);\n      },\n      open: showModal\n    });\n  };\n\n  var toggleKey = function toggleKey(key) {\n    return function () {\n      setActiveKey(key);\n      setShowModal(true);\n    };\n  };\n\n  var headers = function headers() {\n    var full = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return ['', full ? React.createElement(React.Fragment, null, React.createElement(Badge, {\n      type: \"eslint\",\n      active: true,\n      noMargin: true\n    })) : null, React.createElement(React.Fragment, null, React.createElement(Badge, {\n      type: \"google\",\n      active: true,\n      noMargin: true\n    })), React.createElement(React.Fragment, null, React.createElement(Badge, {\n      type: \"airBnb\",\n      active: true,\n      noMargin: true\n    })), React.createElement(React.Fragment, null, React.createElement(Badge, {\n      type: \"standardJs\",\n      active: true,\n      noMargin: true\n    }))].filter(function (v) {\n      return v !== null;\n    });\n  };\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      rows = _useState6[0],\n      setRows = _useState6[1];\n\n  var generateRows = function generateRows() {\n    var applicableRules = rules.filter(function (rule) {\n      var airBnb = rule.airBnb,\n          eslint = rule.eslint,\n          google = rule.google,\n          standardJs = rule.standardJs;\n      return [airBnb, eslint, google, standardJs].filter(Boolean).length;\n    });\n    var sortedRules = applicableRules.sort(function (a, b) {\n      var usageA = [a.google, a.eslint, a.airBnb, a.standardJs].filter(Boolean).length;\n      var usageB = [b.google, b.eslint, b.airBnb, b.standardJs].filter(Boolean).length;\n      return usageB - usageA;\n    });\n    var tableRow = [];\n\n    for (var i = 0; i < sortedRules.length; i += 1) {\n      var rule = sortedRules[i];\n      tableRow.push([React.createElement(Anchor, {\n        onClick: toggleKey(rule.key),\n        link: true\n      }, rule.key), rule.eslint ? '✅' : '❌', rule.google ? '✅' : '❌', rule.airBnb ? '✅' : '❌', rule.standardJs ? '✅' : '❌']);\n    }\n\n    setRows(tableRow);\n  };\n\n  useEffect(generateRows, []);\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      statRows = _useState8[0],\n      setStatRows = _useState8[1];\n\n  useEffect(function () {\n    var packages = ['eslint-config-airbnb', 'standard', 'eslint-config-google'];\n    var promises = [];\n    packages.forEach(function (pkg) {\n      promises.push(fetch(\"https://api.npms.io/v2/package/\".concat(pkg)));\n    });\n\n    _Promise.all(promises).then(function (responses) {\n      return _Promise.all(responses.map(function (res) {\n        return res.json();\n      }));\n    }).then(function (json) {\n      var google = json.find(function (v) {\n        return v.collected.metadata.name === 'eslint-config-google';\n      });\n      var airBnb = json.find(function (v) {\n        return v.collected.metadata.name === 'eslint-config-airbnb';\n      });\n      var standardJs = json.find(function (v) {\n        return v.collected.metadata.name === 'standard';\n      });\n\n      var getDelta = function getDelta(oldValue, newValue) {\n        var delta = (newValue - oldValue) / oldValue * 100;\n        return delta.toFixed();\n      };\n\n      var getData = function getData(pkg) {\n        var collected = pkg.collected,\n            score = pkg.score;\n        var metadata = collected.metadata,\n            npm = collected.npm;\n        return {\n          repo: metadata.links.homepage,\n          downloads: npm.downloads[1].count,\n          downloadDelta: getDelta(npm.downloads[2].count / 4, npm.downloads[1].count),\n          maintenanceScore: (score.detail.maintenance * 100).toFixed(),\n          popularityScore: (score.detail.popularity * 100).toFixed(),\n          qualityScore: (score.detail.quality * 100).toFixed(),\n          totalScore: (score.final * 100).toFixed(),\n          dependentsCount: npm.dependentsCount,\n          starsCount: npm.starsCount\n        };\n      };\n\n      var data = {\n        google: getData(google),\n        airBnb: getData(airBnb),\n        standardJs: getData(standardJs)\n      };\n\n      var getDownloadLabel = function getDownloadLabel(downloads, delta) {\n        var color = delta > 0 ? 'green' : 'red';\n        return React.createElement(React.Fragment, null, downloads, React.createElement(\"span\", {\n          style: {\n            color: color,\n            paddingLeft: 3,\n            fontSize: 11\n          }\n        }, delta, \"%\"));\n      };\n\n      var g = data.google,\n          a = data.airBnb,\n          s = data.standardJs;\n      setStatRows([['⬇ Weekly downloads', getDownloadLabel(g.downloads, g.downloadDelta), getDownloadLabel(a.downloads, a.downloadDelta), getDownloadLabel(s.downloads, s.downloadDelta)], ['🔌 Dependent repos', g.dependentsCount, a.dependentsCount, s.dependentsCount], ['🌟 Weekly star count', g.starsCount, a.starsCount, s.starsCount], ['💯 Total npm score', \"\".concat(g.totalScore, \"%\"), \"\".concat(a.totalScore, \"%\"), \"\".concat(s.totalScore, \"%\")]]);\n    });\n  }, []);\n  return React.createElement(RulesProvider, null, React.createElement(Grid, null, React.createElement(Row, null, React.createElement(Col, {\n    xs: 12,\n    lg: 8,\n    lgOffset: 2\n  }, React.createElement(Text, {\n    type: \"h1\",\n    align: \"center\"\n  }, \"Javascript style guide comparison\"), React.createElement(Text, {\n    align: \"center\"\n  }, \"\\n              Find out how the most popular javascirpt style guides compare to each other.\\n              \"), !!statRows.length && React.createElement(DataSet, {\n    data: {\n      headers: headers(),\n      rows: statRows\n    },\n    src: \"https://npms.io\"\n  }), React.createElement(DataSet, {\n    data: {\n      headers: headers(true),\n      rows: rows\n    }\n  })))), renderModal());\n};\n\nexport default StyleGuides;","map":null,"metadata":{},"sourceType":"module"}